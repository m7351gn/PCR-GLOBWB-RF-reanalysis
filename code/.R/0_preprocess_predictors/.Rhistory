gof_col=gof_col_select, title=title, legend_yn=legend_yn,
KGE_comp=KGE_comp, KGE_comp_corrected=KGE_comp_corrected)
box_corrected_qstatevars <- KGE_boxplot(rf.eval=rf.eval.qstatevars, gof_col=gof_col_select,
KGE_comp=KGE_comp, KGE_comp_corrected=KGE_comp_corrected)
#rf_corrected fitting observations
gof_col_select = 'pcr_RFcorrected'
title = 'RF-corrected (all predictors)'
legend_yn=TRUE
KGE_corrected_allpred <- KGE_map(rf.eval=rf.eval.allpredictors, breaks=breaks,labels=labels,
gof_col=gof_col_select, title=title, legend_yn=legend_yn,
KGE_comp=KGE_comp, KGE_comp_corrected=KGE_comp_corrected)
box_corrected_allpred <- KGE_boxplot(rf.eval=rf.eval.allpredictors, gof_col=gof_col_select,
KGE_comp=KGE_comp, KGE_comp_corrected=KGE_comp_corrected)
combined <- box_uncalibrated / box_corrected_qstatevars / box_corrected_allpred |
KGE_uncalibrated / KGE_corrected_qstatevars / KGE_corrected_allpred
combined <- combined + plot_layout(guides = "collect", width=c(1,2))
combined
View(rf.eval)
#-----------KGE components - correlation--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE'
#select KGE component
KGE_comp <- 'KGE_r'
KGE_comp_corrected <- 'KGE_r_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE'
#select KGE component
KGE_comp <- 'KGE'
KGE_comp_corrected <- 'KGE_corrected'
yscale_lim = c(-0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
####-------------------------------####
source('fun_3_KGE_1_mapboxPlot.R')
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE components - correlation--------------#
#set KGE intervals (correlation is only [0 1])
breaks=c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 1)
labels=c('0 < cor < 0.2','0.2 < cor < 0.4','0.4 < c < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE: correlation'
#select KGE component
KGE_comp <- 'KGE_r'
KGE_comp_corrected <- 'KGE_r_corrected'
#boxplot scale limits
yscale_lim = c(0,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
View(rf.eval)
#-----------KGE components - correlation--------------#
#set KGE intervals (correlation is only [0 1])
breaks=c(-Inf,0, 0.2, 0.4, 0.6, 0.8, 0.9, 1)
labels=c('cor <0','0 < cor < 0.2','0.2 < cor < 0.4','0.4 < cor < 0.6',
'0.6 < cor < 0.8','0.8 < cor < 0.9','0.9 < cor < 1')
legendName = 'KGE: correlation'
#select KGE component
KGE_comp <- 'KGE_r'
KGE_comp_corrected <- 'KGE_r_corrected'
#boxplot scale limits
yscale_lim = c(0,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
#boxplot scale limits
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_r.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
####-------------------------------####
source('fun_0_loadLibrary.R')
####-------------------------------####
source('fun_3_KGE_1_mapboxPlot.R')
subsample <- 'subsample 1'
stationInfo <- read.csv(paste0('../RF/rf_input/', subsample,'/test_stations.csv'))
rf.eval.allpredictors <- read.csv(paste0('../RF/validate/', subsample,'/KGE_allpredictors.csv'))
rf.eval.qstatevars <- read.csv(paste0('../RF/validate/', subsample,'/KGE_qstatevars.csv'))
summary(rf.eval.allpredictors$KGE_corrected)
summary(rf.eval.qstatevars$KGE_corrected)
outputDir <- '../RF/viz/'
wg <- map_data("world")
stations_xy <- stationInfo %>% select(grdc_no, lat, lon)
summary(rf.eval.allpredictors$KGE_alpha_corrected)
summary(rf.eval.qstatevars$KGE_alpha_corrected)
summary(rf.eval.allpredictors$KGE_beta_corrected)
summary(rf.eval.qstatevars$KGE_beta_corrected)
summary(rf.eval.allpredictors$KGE_r_corrected)
summary(rf.eval.qstatevars$KGE_r_corrected)
outputDir <- '../RF/viz/'
wg <- map_data("world")
stations_xy <- stationInfo %>% select(grdc_no, lat, lon)
#-----------KGE--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE'
#select KGE component
KGE_comp <- 'KGE'
KGE_comp_corrected <- 'KGE_corrected'
yscale_lim = c(-0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - correlation--------------#
#set KGE intervals (correlation is only [0 1])
breaks=c(-Inf,0, 0.2, 0.4, 0.6, 0.8, 0.9, 1)
labels=c('cor <0','0 < cor < 0.2','0.2 < cor < 0.4','0.4 < cor < 0.6',
'0.6 < cor < 0.8','0.8 < cor < 0.9','0.9 < cor < 1')
legendName = 'KGE: correlation'
#select KGE component
KGE_comp <- 'KGE_r'
KGE_comp_corrected <- 'KGE_r_corrected'
#boxplot scale limits
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_r.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, Inf)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','z > 0.9')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, 0, 0.5, 0.9, 1.1, 1.5, 2, Inf)
labels=c('z < 0', '0 < z < 0.5', '0.5 < z < 0.9','0.9 < z < 1.1',
'1.1 < z < 1.5','1.5 < z < 2','z > 2')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
View(rf.eval.allpredictors)
legendName = 'KGE: beta'
#select KGE component
KGE_comp <- 'KGE_beta'
KGE_comp_corrected <- 'KGE_beta_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, 0, 0.5, 0.9, 1.1, 1.5, 2, Inf)
labels=c('z < 0', '0 < z < 0.5', '0.5 < z < 0.9','0.9 < z < 1.1',
'1.1 < z < 1.5','1.5 < z < 2','z > 2')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
ggsave(paste0(outputDir,'map_kge_alpha.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - beta--------------#
#set KGE intervals
breaks=c(-Inf, 0, 0.5, 0.9, 1.1, 1.5, 2, Inf)
labels=c('z < 0', '0 < z < 0.5', '0.5 < z < 0.9','0.9 < z < 1.1',
'1.1 < z < 1.5','1.5 < z < 2','z > 2')
legendName = 'KGE: beta'
#select KGE component
KGE_comp <- 'KGE_beta'
KGE_comp_corrected <- 'KGE_beta_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_beta.tiff'), combined, height=20, width=15, units='in', dpi=300)
subsample <- 'subsample 2'
stationInfo <- read.csv(paste0('../RF/rf_input/', subsample,'/test_stations.csv'))
rf.eval.allpredictors <- read.csv(paste0('../RF/validate/', subsample,'/KGE_allpredictors.csv'))
rf.eval.qstatevars <- read.csv(paste0('../RF/validate/', subsample,'/KGE_qstatevars.csv'))
summary(rf.eval.allpredictors$KGE_corrected)
summary(rf.eval.qstatevars$KGE_corrected)
summary(rf.eval.allpredictors$KGE_r_corrected)
summary(rf.eval.qstatevars$KGE_r_corrected)
summary(rf.eval.allpredictors$KGE_alpha_corrected)
summary(rf.eval.qstatevars$KGE_alpha_corrected)
summary(rf.eval.allpredictors$KGE_beta_corrected)
summary(rf.eval.qstatevars$KGE_beta_corrected)
rf.rsult <- read.csv('../RF/validate/subsample 1/tables_allpredictors/rf_result_1112330.csv')
rf.result <- read.csv('../RF/validate/subsample 1/tables_allpredictors/rf_result_1112330.csv')
rf.result <- read.csv('../RF/validate/subsample 1/tables_allpredictors/rf_result_1112300.csv')
View(rf.result)
rf_final <- rf.result %>% select(datetime:res_corrected)
View(rf_final)
####-------------------------------####
source('fun_0_loadLibrary.R')
####-------------------------------####
source('fun_3_KGE_1_mapboxPlot.R')
subsample <- 'subsample 2'
stationInfo <- read.csv(paste0('../RF/rf_input/', subsample,'/test_stations.csv'))
rf.eval.allpredictors <- read.csv(paste0('../RF/validate/', subsample,'/KGE_allpredictors.csv'))
rf.eval.qstatevars <- read.csv(paste0('../RF/validate/', subsample,'/KGE_qstatevars.csv'))
summary(rf.eval.allpredictors$KGE_corrected)
summary(rf.eval.qstatevars$KGE_corrected)
summary(rf.eval.allpredictors$KGE_r_corrected)
summary(rf.eval.qstatevars$KGE_r_corrected)
summary(rf.eval.allpredictors$KGE_alpha_corrected)
summary(rf.eval.qstatevars$KGE_alpha_corrected)
summary(rf.eval.allpredictors$KGE_beta_corrected)
summary(rf.eval.qstatevars$KGE_beta_corrected)
outputDir <- '../RF/viz/'
wg <- map_data("world")
stations_xy <- stationInfo %>% select(grdc_no, lat, lon)
#-----------KGE--------------#
#set KGE intervals
breaks=c(-Inf, -5.0, -1, 0, 0.2, 0.6, 0.8, 0.9, 1)
labels=c('z < -5', '-5 < z < -1', '-1 < z < 0', '0 < z < 0.2','0.2 < z < 0.6',
'0.6 < z < 0.8','0.8 < z < 0.9','0.9 < z < 1')
legendName = 'KGE'
#select KGE component
KGE_comp <- 'KGE'
KGE_comp_corrected <- 'KGE_corrected'
yscale_lim = c(-0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
outputDir <- paste0('../RF/viz/',subsample)
ggsave(paste0(outputDir,'map_kge.tiff'), combined, height=20, width=15, units='in', dpi=300)
subsample <- 'subsample 2/'
stationInfo <- read.csv(paste0('../RF/rf_input/', subsample,'test_stations.csv'))
rf.eval.allpredictors <- read.csv(paste0('../RF/validate/', subsample,'KGE_allpredictors.csv'))
rf.eval.qstatevars <- read.csv(paste0('../RF/validate/', subsample,'KGE_qstatevars.csv'))
outputDir <- paste0('../RF/viz/',subsample)
ggsave(paste0(outputDir,'map_kge.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - correlation--------------#
#set KGE intervals (correlation is only [0 1])
breaks=c(-Inf,0, 0.2, 0.4, 0.6, 0.8, 0.9, 1)
labels=c('cor <0','0 < cor < 0.2','0.2 < cor < 0.4','0.4 < cor < 0.6',
'0.6 < cor < 0.8','0.8 < cor < 0.9','0.9 < cor < 1')
legendName = 'KGE: correlation'
#select KGE component
KGE_comp <- 'KGE_r'
KGE_comp_corrected <- 'KGE_r_corrected'
#boxplot scale limits
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_r.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - alpha--------------#
#set KGE intervals
breaks=c(-Inf, 0, 0.5, 0.9, 1.1, 1.5, 2, Inf)
labels=c('z < 0', '0 < z < 0.5', '0.5 < z < 0.9','0.9 < z < 1.1',
'1.1 < z < 1.5','1.5 < z < 2','z > 2')
legendName = 'KGE: alpha'
#select KGE component
KGE_comp <- 'KGE_alpha'
KGE_comp_corrected <- 'KGE_alpha_corrected'
yscale_lim = c(0.5,1)
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_alpha.tiff'), combined, height=20, width=15, units='in', dpi=300)
#-----------KGE components - beta--------------#
#set KGE intervals
breaks=c(-Inf, 0, 0.5, 0.9, 1.1, 1.5, 2, Inf)
labels=c('z < 0', '0 < z < 0.5', '0.5 < z < 0.9','0.9 < z < 1.1',
'1.1 < z < 1.5','1.5 < z < 2','z > 2')
legendName = 'KGE: beta'
#select KGE component
KGE_comp <- 'KGE_beta'
KGE_comp_corrected <- 'KGE_beta_corrected'
source('fun_3_KGE_2_griddedMapBox.R')
combined
ggsave(paste0(outputDir,'map_kge_beta.tiff'), combined, height=20, width=15, units='in', dpi=300)
####-------------------------------####
source('fun_0_loadLibrary.R')
# model <- readRDS('../RF/train/trainedRF.rds')
vi_df <- read.csv('../RF/train/varImportance_allpredictors.csv')
vi_df[1,1]='pcrDischarge'
viPlot <-  ggplot(vi_df %>% gather('key','value', importance)) +
geom_col(aes(reorder(names, c(value[key=='importance'])), sqrt(value)),
position = 'dodge', fill='khaki') +
coord_flip() +
theme_light()+
facet_grid(.~key, scale='free')+
theme(
axis.text.y = element_text(size = 15.5),
axis.title = element_text(size = 0),
axis.text.x = element_text(size = 14),
strip.text.x = element_text(size = 15, color = 'black'),
strip.background = element_rect(colour = "transparent", fill = "white"),
strip.text.y = element_text(size = 15, color = 'black'),
title = element_text(size = 16),
plot.subtitle = element_text(size = 16))+
labs(x=NULL, y=NULL,
title='Variable importance - large training - all predictors')     #mean decrease in node impurity (sd)
viPlot
ggsave("../RF/viz/varImportance_allpredictors.tiff", viPlot, height=13, width=24, units='in', dpi=300)
### improvement percentage
improvement <- ( rf.eval.allpredictors$KGE_r_corrected > rf.eval.allpredictors$KGE )
### improvement percentage
vector <- rf.eval.allpredictors
improvement <- (length(vector[vector$KGE_r_corrected > vector$KGE])  )
improvement <- length(vector$grdc_no[vector$KGE_r_corrected > vector$KGE])
vector$KGE_r_corrected > vector$KG
vector$KGE_r_corrected > vector$KGE
vector$KGE_r_corrected > vector$KGE
View(rf.eval.allpredictors)
View(stationInfo)
View(rf.eval.qstatevars)
View(rf.eval.qstatevars)
View(rf.eval.qstatevars)
View(rf.eval.qstatevars)
improvement <- length(vector$grdc_no[vector$KGE_r_corrected > vector$KGE]) / nrow(stationInfo)
View(rf.eval.allpredictors)
### improvement percentage
vector <- rf.eval.allpredictors
improvement <- length(vector$grdc_no[vector$KGE_corrected > vector$KGE]) / nrow(stationInfo)
improvement <- length(vector$grdc_no[vector$KGE_corrected > vector$KGE]) / nrow(stationInfo)
improvement
### KGE passed from <0 to >0
vector <- rf.eval.allpredictors
to_positive <- length(vector$grdc_no[vector$KGE_corrected > 0 & vector$KGE < 0 ]) / nrow(stationInfo)
to_positive
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code")
####-------------------------------####
source('fun_0_loadLibrary.R')
stations_daily <- read.csv('../data/stationLatLon_daily.csv')
stations_monthly <- read.csv('../data/stationLatLon_monthly.csv')
stations_dm <- merge(stations_daily, stations_monthly,
by=intersect(names(stations_daily), names(stations_monthly)),
all=TRUE)
write.csv(stations_dm,'../data/stationLatLon.csv', row.names=F)
View(stations_dm)
nrow(stations_dm)
2287-1420
####-------------------------------####
source('../../fun_0_loadLibrary.R')
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code")
####-------------------------------####
source('../../fun_0_loadLibrary.R')
# set directories
grdcDailyDir <- '../data/preprocess/grdc_discharge_daily/'
grdcMonthlyDir <- '../data/preprocess/grdc_discharge_monthly/'
outputDir <- '../data/preprocess/grdc_discharge/'
stationInfo <- read.csv('../data/stationLatLon.csv')
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDateDaily <- '2019-12-31'
endDateMonthly <- '2019-12-01'
datesDaily <- as.data.frame(seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="days"))
datesMonthly <- as.data.frame(seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="months"))
colnames(datesDaily) <- 'datetime'
colnames(datesMonthly) <- 'datetime'
source('fun_0_preprocess_grdc.R')
lapply(1:nrow(stationInfo), reanalyse_grdc_discharge)
i=1
station_no <- stationInfo$grdc_no[i]
print(station_no)
print(station_no)
if(file.exists(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'))){
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
obsDailyExt <- merge(datesDaily,obsDaily, all=T)
obsDailyNew <- obsDailyExt[which(obsDailyExt$datetime==startDate):which(obsDailyExt$datetime==endDateDaily),] %>%
mutate(datetime=as.Date(datetime)) %>% replace_with_na(replace = list(obs = -999))
obsDaily2Monthly <- obsDailyNew %>% mutate(datetime = floor_date(obsDailyNew$datetime, 'month')) %>%
group_by(datetime) %>%
summarise(obs=mean(obs))
row.names(obsDaily2Monthly) <- NULL
}
#same for monthly (except upscaling)
if(file.exists(paste0(grdcMonthlyDir, 'grdc_monthly_',station_no,'.csv'))){
obsMonthly <- vroom(paste0(grdcMonthlyDir, 'grdc_monthly_',station_no, '.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime)) %>%
replace_with_na(.,replace = list(obs = -999)) %>%
replace_with_na(.,replace = list(calculated = -999))
obsMonthlyExt <- merge(datesMonthly,obsMonthly, all=T)
obsMonthlyNew <- obsMonthlyExt[which(obsMonthlyExt$datetime==startDate):which(obsMonthlyExt$datetime==endDateMonthly),] %>%
mutate(datetime=as.Date(datetime))
row.names(obsMonthlyNew) <- NULL
}
# if only daily exists
if( file.exists(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv')) &&
!file.exists(paste0(grdcMonthlyDir, 'grdc_monthly_',station_no,'.csv'))){
obsReanalysis <- obsDaily2Monthly
} else if (!file.exists(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv')) &&
file.exists(paste0(grdcMonthlyDir, 'grdc_monthly_',station_no,'.csv'))){
# if only monthly exists
obsReanalysis <- obsMonthlyNew %>% select(.,c('datetime','obs'))
} else if ( file.exists(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv')) &&
file.exists(paste0(grdcMonthlyDir, 'grdc_monthly_',station_no,'.csv'))){
# if both exists
obsReanalysis <- obsMonthlyNew #%>% mutate(., obs[which(!is.na(calculated))])
idx <- which(!is.na(obsReanalysis$calculated)) # index of daily upscale not na
obsReanalysis$obs[idx] <- obsReanalysis$calculated[idx] #assign daily upscaled when exists
obsReanalysis <- obsReanalysis %>% select(.,c('datetime','obs'))
}
# write to disk
write.csv(obsReanalysis, paste0(outputDir,'grdc_',station_no,'.csv'), row.names=F)
if(file.exists(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'))){
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
obsDailyExt <- merge(datesDaily,obsDaily, all=T)
obsDailyNew <- obsDailyExt[which(obsDailyExt$datetime==startDate):which(obsDailyExt$datetime==endDateDaily),] %>%
mutate(datetime=as.Date(datetime)) %>% replace_with_na(replace = list(obs = -999))
obsDaily2Monthly <- obsDailyNew %>% mutate(datetime = floor_date(obsDailyNew$datetime, 'month')) %>%
group_by(datetime) %>%
summarise(obs=mean(obs))
row.names(obsDaily2Monthly) <- NULL
}
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
station_no <- stationInfo$grdc_no[i]
print(station_no)
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
dobsDailyExt <- merge(datesDaily,obsDaily, all=T)
obsDailyNew <- obsDailyExt[which(obsDailyExt$datetime==startDate):which(obsDailyExt$datetime==endDateDaily),] %>%
mutate(datetime=as.Date(datetime)) %>% replace_with_na(replace = list(obs = -999))
####-------------------------------####
source('../../fun_0_loadLibrary.R')
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_predictors")
####-------------------------------####
source('fun_0_loadLibrary.R')
####-------------------------------####
source('../fun_0_loadLibrary.R')
stationInfo <- read.csv('../../../data/stationLatLon.csv')
#grdc stations full time series
filePathGrdc <- paste0('../../../data/preprocess/grdc_discharge/')
filePathStatevars <- paste0('../../../data/preprocess/pcr_statevars/')
#pcr-globwb time series 1979-2019
filePathDischarge <- paste0('../../../data/preprocess/pcr_discharge/')
filePathStatevars <- paste0('../../../data/preprocess/pcr_statevars/')
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
i=1
dir.create(outputDir, showWarnings=FALSE, recursive=TRUE)
outputDir <- '../../../data/predictors/pcr_qstatevars/'
dir.create(outputDir, showWarnings=FALSE, recursive=TRUE)
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
station_no <- stationInfo$grdc_no[i]
upstreamArea <- stationInfo$area[i]
####-------discharge-------####
obs <- read.csv(paste0(filePathGrdc, 'grdc_', station_no, '.csv')) %>%
mutate(datetime=dates)
pcr <- read.csv(paste0(filePathDischarge, 'pcr_discharge_', station_no, '.csv')) %>%
mutate(datetime=as.Date(datetime))
pred <- read.csv(paste0(filePathStatevars, 'pcr_statevars_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) %>%
select(-c('channelStorage', 'totLandSurfaceActuaET'))
stationInfo <- read.csv('../../../data/stationLatLon_catchAttr.csv')
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_predictors")
source('fun_0_preprocess_catchAttr.R')
# mclapply(1:length(fileListDischarge), create_predictor_table, mc.cores=24)
lapply(1:nrow(stationInfo), create_predictor_table)
# mclapply(1:length(fileListDischarge), create_predictor_table, mc.cores=24)
pblapply(1:nrow(stationInfo), create_predictor_table)
nrow(stationInfo)
View(stationInfo)
